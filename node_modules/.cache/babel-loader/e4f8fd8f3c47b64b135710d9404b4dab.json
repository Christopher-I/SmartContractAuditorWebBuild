{"ast":null,"code":"const A = require(\"./array.js\");\n\nconst at = (bytes, index) => parseInt(bytes.slice(index * 2 + 2, index * 2 + 4), 16);\n\nconst random = bytes => {\n  let rnd;\n  if (typeof window !== \"undefined\" && window.crypto && window.crypto.getRandomValues) rnd = window.crypto.getRandomValues(new Uint8Array(bytes));else if (typeof require !== \"undefined\") rnd = require(\"c\" + \"rypto\").randomBytes(bytes);else throw \"Safe random numbers not available.\";\n  let hex = \"0x\";\n\n  for (let i = 0; i < bytes; ++i) hex += (\"00\" + rnd[i].toString(16)).slice(-2);\n\n  return hex;\n};\n\nconst length = a => (a.length - 2) / 2;\n\nconst flatten = a => \"0x\" + a.reduce((r, s) => r + s.slice(2), \"\");\n\nconst slice = (i, j, bs) => \"0x\" + bs.slice(i * 2 + 2, j * 2 + 2);\n\nconst reverse = hex => {\n  let rev = \"0x\";\n\n  for (let i = 0, l = length(hex); i < l; ++i) {\n    rev += hex.slice((l - i) * 2, (l - i + 1) * 2);\n  }\n\n  return rev;\n};\n\nconst pad = (l, hex) => hex.length === l * 2 + 2 ? hex : pad(l, \"0x\" + \"0\" + hex.slice(2));\n\nconst padRight = (l, hex) => hex.length === l * 2 + 2 ? hex : padRight(l, hex + \"0\");\n\nconst toArray = hex => {\n  let arr = [];\n\n  for (let i = 2, l = hex.length; i < l; i += 2) arr.push(parseInt(hex.slice(i, i + 2), 16));\n\n  return arr;\n};\n\nconst fromArray = arr => {\n  let hex = \"0x\";\n\n  for (let i = 0, l = arr.length; i < l; ++i) {\n    let b = arr[i];\n    hex += (b < 16 ? \"0\" : \"\") + b.toString(16);\n  }\n\n  return hex;\n};\n\nconst toUint8Array = hex => new Uint8Array(toArray(hex));\n\nconst fromUint8Array = arr => fromArray([].slice.call(arr, 0));\n\nconst fromNumber = num => {\n  let hex = num.toString(16);\n  return hex.length % 2 === 0 ? \"0x\" + hex : \"0x0\" + hex;\n};\n\nconst toNumber = hex => parseInt(hex.slice(2), 16);\n\nconst concat = (a, b) => a.concat(b.slice(2));\n\nconst fromNat = bn => bn === \"0x0\" ? \"0x\" : bn.length % 2 === 0 ? bn : \"0x0\" + bn.slice(2);\n\nconst toNat = bn => bn[2] === \"0\" ? \"0x\" + bn.slice(3) : bn;\n\nconst fromAscii = ascii => {\n  let hex = \"0x\";\n\n  for (let i = 0; i < ascii.length; ++i) hex += (\"00\" + ascii.charCodeAt(i).toString(16)).slice(-2);\n\n  return hex;\n};\n\nconst toAscii = hex => {\n  let ascii = \"\";\n\n  for (let i = 2; i < hex.length; i += 2) ascii += String.fromCharCode(parseInt(hex.slice(i, i + 2), 16));\n\n  return ascii;\n}; // From https://gist.github.com/pascaldekloe/62546103a1576803dade9269ccf76330\n\n\nconst fromString = s => {\n  const makeByte = uint8 => {\n    const b = uint8.toString(16);\n    return b.length < 2 ? \"0\" + b : b;\n  };\n\n  let bytes = \"0x\";\n\n  for (let ci = 0; ci != s.length; ci++) {\n    let c = s.charCodeAt(ci);\n\n    if (c < 128) {\n      bytes += makeByte(c);\n      continue;\n    }\n\n    if (c < 2048) {\n      bytes += makeByte(c >> 6 | 192);\n    } else {\n      if (c > 0xd7ff && c < 0xdc00) {\n        if (++ci == s.length) return null;\n        let c2 = s.charCodeAt(ci);\n        if (c2 < 0xdc00 || c2 > 0xdfff) return null;\n        c = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);\n        bytes += makeByte(c >> 18 | 240);\n        bytes += makeByte(c >> 12 & 63 | 128);\n      } else {\n        // c <= 0xffff\n        bytes += makeByte(c >> 12 | 224);\n      }\n\n      bytes += makeByte(c >> 6 & 63 | 128);\n    }\n\n    bytes += makeByte(c & 63 | 128);\n  }\n\n  return bytes;\n};\n\nconst toString = bytes => {\n  let s = '';\n  let i = 0;\n  let l = length(bytes);\n\n  while (i < l) {\n    let c = at(bytes, i++);\n\n    if (c > 127) {\n      if (c > 191 && c < 224) {\n        if (i >= l) return null;\n        c = (c & 31) << 6 | at(bytes, i) & 63;\n      } else if (c > 223 && c < 240) {\n        if (i + 1 >= l) return null;\n        c = (c & 15) << 12 | (at(bytes, i) & 63) << 6 | at(bytes, ++i) & 63;\n      } else if (c > 239 && c < 248) {\n        if (i + 2 >= l) return null;\n        c = (c & 7) << 18 | (at(bytes, i) & 63) << 12 | (at(bytes, ++i) & 63) << 6 | at(bytes, ++i) & 63;\n      } else return null;\n\n      ++i;\n    }\n\n    if (c <= 0xffff) s += String.fromCharCode(c);else if (c <= 0x10ffff) {\n      c -= 0x10000;\n      s += String.fromCharCode(c >> 10 | 0xd800);\n      s += String.fromCharCode(c & 0x3FF | 0xdc00);\n    } else return null;\n  }\n\n  return s;\n};\n\nmodule.exports = {\n  random,\n  length,\n  concat,\n  flatten,\n  slice,\n  reverse,\n  pad,\n  padRight,\n  fromAscii,\n  toAscii,\n  fromString,\n  toString,\n  fromNumber,\n  toNumber,\n  fromNat,\n  toNat,\n  fromArray,\n  toArray,\n  fromUint8Array,\n  toUint8Array\n};","map":null,"metadata":{},"sourceType":"script"}