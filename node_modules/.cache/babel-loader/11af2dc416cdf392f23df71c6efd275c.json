{"ast":null,"code":"var _jsxFileName = \"/Users/chris/Documents/BlockchainProjects/SmartContractAuditor/test/src/components/App.js\";\nimport React from 'react';\nimport { Container, Form, TextArea, Input, Grid, List, Button, Modal } from 'semantic-ui-react';\nimport Auditor from '../auditor/Auditor';\nimport Head from 'next/head';\nimport Header from './Header';\nimport renderedModal from './renderedModal';\nimport LandingPageSection1 from './Sections/landingPageSection1';\nimport LandingPageSection2 from './Sections/landingPageSection2';\nimport sampleContract from '../../sampleContract';\nimport solc from 'solc/wrapper';\n\nclass landingPage extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentCompiler: '',\n      contractCode: sampleContract(),\n      creationCost: '',\n      executionCost: '',\n      gasEstimate: '',\n      timeOfAudit: '',\n      fileSize: '',\n      vunerabiltiesFound: '',\n      noOfLines: '',\n      percent: '',\n      errorMessage: '',\n      successMessage: '',\n      renderedList: \"\",\n      loading: false,\n      suggestions: [],\n      userName: '',\n      userContactInfo: '',\n      userSuggestion: '',\n      modalOpen: false //get Time of Audit\n\n    };\n\n    this.setTimeOfAudit = () => {\n      let today = new Date();\n      let date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\n      let time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n      let dateTime = date + ' ' + time;\n      this.setState({\n        timeOfAudit: dateTime\n      });\n    };\n\n    this.selectCompiler = compiler => {\n      this.setState({\n        currentCompiler: compiler\n      });\n    };\n\n    this.storeContractCodeToState = contractCode => {\n      console.log(contractCode);\n      this.setState({\n        contractCode: contractCode\n      });\n    };\n\n    this.removeErrorMessage = () => {\n      this.setState({\n        warningsList: '',\n        creationCost: '',\n        executionCost: '',\n        gasEstimate: '',\n        timeOfAudit: '',\n        fileSize: '',\n        loading: false,\n        vunerabiltiesFound: '',\n        noOfLines: '',\n        percent: '',\n        errorMessage: '',\n        successMessage: '',\n        renderedList: \"\"\n      });\n    };\n\n    this.renderWarningList = warnings => {\n      //update loading bar\n      this.setState({\n        percent: '75',\n        warningsList: warnings.length\n      });\n      let list = warnings.map(warnings => {\n        return React.createElement(List.Item, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        }, React.createElement(List.Content, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        }, React.createElement(List.Header, {\n          as: \"a\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        }, \"line \", warnings.key), React.createElement(List.Description, {\n          as: \"a\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        }, warnings.value)));\n      }); //update loading bar\n\n      this.setState({\n        percent: '100',\n        renderedList: list\n      });\n    };\n\n    this.auditCode = dataArray => {\n      return Auditor(dataArray);\n    };\n\n    this.onSubmit = () => {\n      //check if compiler is selected by user else notify user\n      this.setTimeOfAudit();\n      let self = this; //notify user of progress\n\n      this.setState({\n        loading: true,\n        errorMessage: '',\n        successMessage: ''\n      }); //store contract code to state and prepare for compile and audit\n\n      let source = this.state.contractCode; //split code into array based on each new line\n\n      let dataArray = source.split(\"\\n\");\n      let dataArrayLength = dataArray.length; //update loading bar\n\n      self.setState({\n        percent: '25'\n      }); //let result = solc.compile(source.toString(), 1);\n\n      console.log(result); // console.log(result.sources[\"\"]);\n      //console.log(result.contracts);\n      //check for errrors in compilation\n      // if(result.errors && !result.sources[\"\"]){\n      // \t\t\t  //save all warning and errors to state\n      // self.setState({\n      // \t\terrorMessage: result.errors[0]\n      // \t})\n      // }else{\n      // \t//check for warnings in compilation\n      // if(result.errors){\n      // //save all warning and errors to state\n      // self.setState({\n      // \t\terrorMessage: result.errors[0]\n      // \t})\n      //  }\n      //compilation was succesful, auditing and updating general stats begins at this point \n      //compute total gas cost which is the estimated creation cost plus the execution cost\n      //let totalGasCost = result.contracts[\":Migrations\"].gasEstimates.creation[0]+result.contracts[\":Migrations\"].gasEstimates.creation[1];\n      // self.setState({\n      // \tnoOfLines:dataArrayLength,\n      // \t// creationCost:result.contracts[\":Migrations\"].gasEstimates.creation[0],\n      // \t// executionCost:result.contracts[\":Migrations\"].gasEstimates.creation[1],\n      // \t// gasEstimate : totalGasCost,\n      // \tpercent: 50,\n      // \tsuccessMessage:\"Audit Complete!\"\n      // })\n      // //send contract code to auditor and await feed back of array of warnings\n      // let warnings = self.auditCode(dataArray);\n      // //send array of warnings to renderList function to create organized JSX and update state\n      // self.renderWarningList(warnings);\n      // }\n      //)\n    };\n\n    this.saveUserSuggestionToState = () => {\n      let userSuggestion = {};\n      userSuggestion.name = this.state.userName;\n      userSuggestion.contactInfo = this.state.userContactInfo;\n      userSuggestion.suggestion = this.state.userSuggestion;\n      let currentSuggestions = this.state.suggestions;\n      currentSuggestions.push(userSuggestion);\n      this.setState({\n        suggestions: currentSuggestions,\n        modalOpen: false\n      });\n      console.log(this.state.suggestions);\n    };\n\n    this.userNameToState = event => {\n      this.setState({\n        userName: event.target.value\n      });\n    };\n\n    this.userContactInfoToState = event => {\n      this.setState({\n        userContactInfo: event.target.value\n      });\n    };\n\n    this.userSuggestionToState = event => {\n      this.setState({\n        userSuggestion: event.target.value\n      });\n    };\n\n    this.handleOpen = () => this.setState({\n      modalOpen: true\n    });\n\n    this.handleClose = () => this.setState({\n      modalOpen: false\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, React.createElement(Container, {\n      style: {\n        width: '1300px',\n        marginTop: '10px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }), React.createElement(Grid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, React.createElement(Grid.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      width: 11,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, React.createElement(LandingPageSection1, {\n      contractCode: this.state.contractCode,\n      removeErrorMessage: this.removeErrorMessage,\n      loading: this.state.loading,\n      successMessage: this.state.successMessage,\n      errorMessage: this.state.errorMessage,\n      percent: this.state.percent,\n      storeContractCodeToState: this.storeContractCodeToState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    })), React.createElement(Grid.Column, {\n      width: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, React.createElement(LandingPageSection2, {\n      warningsList: this.state.warningsList,\n      renderedList: this.state.renderedList,\n      gasEstimate: this.state.gasEstimate,\n      removeErrorMessage: this.removeErrorMessage,\n      loading: this.state.loading,\n      noOfLines: this.state.noOfLines,\n      timeOfAudit: this.state.timeOfAudit,\n      onSubmit: this.onSubmit,\n      selectCompiler: this.selectCompiler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    })), React.createElement(Grid.Column, {\n      width: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }, React.createElement(Modal, {\n      open: this.state.modalOpen,\n      onClose: this.handleClose,\n      trigger: React.createElement(Button, {\n        onClick: this.handleOpen,\n        style: {\n          marginTop: '775px'\n        },\n        basic: true,\n        circular: true,\n        icon: \"comment alternate outline\",\n        size: \"huge\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }, \"Suggestion Box\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }, React.createElement(Modal.Header, {\n      style: {\n        fontSize: '19px',\n        color: 'grey'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }, \"Thank you for taking the time to leave some feedback, I am a solo enthusiast who created this auditor for fun and to contribute to our beautiful ecosystem, I appreciate all suggestions, contributions and feedback to help improve this platform.\"), React.createElement(Modal.Content, {\n      image: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    }, React.createElement(Modal.Description, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }, React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }, React.createElement(Input, {\n      onChange: this.userNameToState,\n      value: this.state.userName,\n      label: \"Name(optional)\",\n      placeholder: \"John Doe.....\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }), React.createElement(Input, {\n      onChange: this.userContactInfoToState,\n      value: this.state.userContactInfo,\n      label: \"Contact Information\",\n      placeholder: \"Email, Telegram,Git..etc\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }), React.createElement(TextArea, {\n      onChange: this.userSuggestionToState,\n      value: this.state.userSuggestion,\n      style: {\n        width: '850px',\n        height: '100px'\n      },\n      placeholder: \"Please enter your message here...\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }), React.createElement(Button, {\n      floated: \"right\",\n      secondary: true,\n      onClick: this.saveUserSuggestionToState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291\n      },\n      __self: this\n    }, \"Submit\")), React.createElement(\"h4\", {\n      style: {\n        color: 'gray'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }, \"ETH Address: 0x001FabDCb503f618ceE9d79D949301EEBC170647\")))))))), React.createElement(\"h4\", {\n      style: {\n        marginLeft: '380px',\n        color: 'gray'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }, \"Suggestions and Contributions are welcome ETH Address: 0x001FabDCb503f618ceE9d79D949301EEBC170647\"));\n  }\n\n}\n\nexport default landingPage;","map":{"version":3,"sources":["/Users/chris/Documents/BlockchainProjects/SmartContractAuditor/test/src/components/App.js"],"names":["React","Container","Form","TextArea","Input","Grid","List","Button","Modal","Auditor","Head","Header","renderedModal","LandingPageSection1","LandingPageSection2","sampleContract","solc","landingPage","Component","state","currentCompiler","contractCode","creationCost","executionCost","gasEstimate","timeOfAudit","fileSize","vunerabiltiesFound","noOfLines","percent","errorMessage","successMessage","renderedList","loading","suggestions","userName","userContactInfo","userSuggestion","modalOpen","setTimeOfAudit","today","Date","date","getFullYear","getMonth","getDate","time","getHours","getMinutes","getSeconds","dateTime","setState","selectCompiler","compiler","storeContractCodeToState","console","log","removeErrorMessage","warningsList","renderWarningList","warnings","length","list","map","key","value","auditCode","dataArray","onSubmit","self","source","split","dataArrayLength","result","saveUserSuggestionToState","name","contactInfo","suggestion","currentSuggestions","push","userNameToState","event","target","userContactInfoToState","userSuggestionToState","handleOpen","handleClose","render","width","marginTop","fontSize","color","height","marginLeft"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Container, Form, TextArea,Input, Grid,List,Button,Modal } from 'semantic-ui-react';\nimport Auditor from '../auditor/Auditor';\nimport Head from 'next/head';\nimport Header from './Header';\nimport renderedModal from './renderedModal';\nimport LandingPageSection1 from './Sections/landingPageSection1';\nimport LandingPageSection2 from './Sections/landingPageSection2';\nimport sampleContract from '../../sampleContract';\nimport solc from 'solc/wrapper';\n\n\n\nclass landingPage extends React.Component{\n\n\tstate = {\n\t\tcurrentCompiler:'',\n\t\tcontractCode:sampleContract(),\n\t\tcreationCost:'',\n\t\texecutionCost:'',\n\t\tgasEstimate:'',\n\t\ttimeOfAudit:'',\n\t\tfileSize: '',\n\t\tvunerabiltiesFound: '',\n\t\tnoOfLines: '',\n\t\tpercent:'',\n\t\terrorMessage:'',\n\t\tsuccessMessage:'',\n\t\trenderedList:\"\",\n\t\tloading:false,\n\t\tsuggestions:[],\n\t\tuserName:'',\n\t\tuserContactInfo:'',\n\t\tuserSuggestion:'',\n\t\tmodalOpen:false\n\t}\n\n\t//get Time of Audit\n\tsetTimeOfAudit=()=>{\n\n\t\tlet today = new Date();\n\t\tlet date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\n\t\tlet time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n\t\tlet dateTime = date+' '+time;\n\n\t\tthis.setState({\n\t\t\ttimeOfAudit: dateTime\n\t\t})\n\t}\n\n\t//receive compiler version from child component-landingPageSection1 and store it to state\n\tselectCompiler =(compiler)=>{\n\t\tthis.setState({\n\t\t\tcurrentCompiler:compiler\n\t\t})\n\t}\n\n\t//receive contract code from child component-landingPageSection2 and store it to state\n\tstoreContractCodeToState=(contractCode)=>{\n\t\tconsole.log(contractCode);\n\t\tthis.setState({\n\t\t\tcontractCode: contractCode\n\t\t})\n\t}\n//reset all neccesary variable when screen is clicked, drop down is selected and other similar events\n\tremoveErrorMessage=()=>{\n\t\tthis.setState({\n\t\twarningsList:'',\n\t\tcreationCost:'',\n\t\texecutionCost:'',\n\t\tgasEstimate:'',\n\t\ttimeOfAudit:'',\n\t\tfileSize: '',\n\t\tloading:false,\n\t\tvunerabiltiesFound: '',\n\t\tnoOfLines: '',\n\t\tpercent:'',\n\t\terrorMessage:'',\n\t\tsuccessMessage:'',\n\t\trenderedList:\"\",\n\t\t})\n\t}\n\n\n\trenderWarningList=(warnings)=>{\n\n\t\t //update loading bar\n      \tthis.setState({\n\t\t  \t\tpercent: '75',\n\t\t  \t\twarningsList:warnings.length\n\t\t  \t})\n\n\tlet list = warnings.map(warnings => {        \n            return (\n                <List.Item>\n                          <List.Content>\n                            <List.Header as='a'>line {warnings.key}</List.Header>\n                            <List.Description as='a'>{warnings.value}</List.Description>\n                          </List.Content>\n                    </List.Item>\n            );   \n        });\n\n\t     //update loading bar\n        this.setState({\n\t\t  \t\tpercent: '100',\n\t\t  \t\trenderedList:list\n\t\t  \t})\n\n\t}\n\n\n\tauditCode=(dataArray)=>{\n        return Auditor(dataArray);\n\n    }\n\n\t//Compile contract and run audit\n\tonSubmit =()=>{\n\t\t//check if compiler is selected by user else notify user\n\t\tthis.setTimeOfAudit();\n\t\tlet self = this;\n\n\n\t\t//notify user of progress\n\t\tthis.setState({\n\t\t  \t\tloading: true,\n\t\t  \t\terrorMessage:'',\n\t\t  \t\tsuccessMessage:''\n\t\t  \t})\n\n\t\t//store contract code to state and prepare for compile and audit\n\t\tlet source = this.state.contractCode;\n\t\t//split code into array based on each new line\n        let dataArray = source.split(\"\\n\");\n        let dataArrayLength = dataArray.length;\n\n        //update loading bar\n        self.setState({\n\t\t  \t\tpercent: '25'\n\t\t  \t})\n\n\n\t\t  //let result = solc.compile(source.toString(), 1);\n\t\t  console.log(result);\n\t\t  // console.log(result.sources[\"\"]);\n\t\t  //console.log(result.contracts);\n\n\t\t  //check for errrors in compilation\n\t\t  // if(result.errors && !result.sources[\"\"]){\n\n\t\t  // \t\t\t  //save all warning and errors to state\n\t\t  // self.setState({\n\t\t  // \t\terrorMessage: result.errors[0]\n\t\t  // \t})\n\n\n\n\t\t  // }else{\n\t\t  // \t//check for warnings in compilation\n\t\t  // if(result.errors){\n\n\t\t  // //save all warning and errors to state\n\t\t  // self.setState({\n\t\t  // \t\terrorMessage: result.errors[0]\n\t\t  // \t})\n\t\t  //  }\n\n\t\t  \t//compilation was succesful, auditing and updating general stats begins at this point \n\n\t\t  \t//compute total gas cost which is the estimated creation cost plus the execution cost\n\t\t  //let totalGasCost = result.contracts[\":Migrations\"].gasEstimates.creation[0]+result.contracts[\":Migrations\"].gasEstimates.creation[1];\n\n\t\t  \t// self.setState({\n\t\t  \t// \tnoOfLines:dataArrayLength,\n\t\t  \t// \t// creationCost:result.contracts[\":Migrations\"].gasEstimates.creation[0],\n\t\t  \t// \t// executionCost:result.contracts[\":Migrations\"].gasEstimates.creation[1],\n\t\t  \t// \t// gasEstimate : totalGasCost,\n\t\t  \t// \tpercent: 50,\n\t\t  \t// \tsuccessMessage:\"Audit Complete!\"\n\t\t  \t// })\n\t\t  \t// //send contract code to auditor and await feed back of array of warnings\n\t\t  \t// let warnings = self.auditCode(dataArray);\n\n\t\t  \t// //send array of warnings to renderList function to create organized JSX and update state\n\t\t  \t// self.renderWarningList(warnings);\n\n\n\t\t // }\n\t\t  //)\n\t\n\t\t};\n\n\t// \tthis.setState({\n\t// \t  \t\tloading: false\n\t// \t  \t})  \n\t// }\n\n\tsaveUserSuggestionToState=()=>{\n\t\tlet userSuggestion ={}\n\t\tuserSuggestion.name = this.state.userName;\n\t\tuserSuggestion.contactInfo = this.state.userContactInfo;\n\t\tuserSuggestion.suggestion= this.state.userSuggestion;\n\t\tlet currentSuggestions = this.state.suggestions;\n\t\tcurrentSuggestions.push(userSuggestion);\n\n\t\tthis.setState({\n\t\t\tsuggestions:currentSuggestions,\n\t\t\tmodalOpen:false\n\t\t})\n\nconsole.log(this.state.suggestions);\n\t}\n\n\tuserNameToState=(event)=>{\n\t\tthis.setState({\n\t\t\tuserName:event.target.value\n\t\t})\n\t}\n\n\tuserContactInfoToState=(event)=>{\n\t\tthis.setState({\n\t\t\tuserContactInfo:event.target.value\n\t\t})\n\t}\n\n\tuserSuggestionToState=(event)=>{\n\t\tthis.setState({\n\t\t\tuserSuggestion:event.target.value\n\t\t})\n\t}\n\n\thandleOpen = () => this.setState({ modalOpen: true })\n\n    handleClose = () => this.setState({ modalOpen: false })\n\n\n\trender(){\n\n\t\treturn(\n\t\t\t<div >\n\n\t\t\t<Container style={{width:'1300px', marginTop:'10px'}}>\n\t\t\t  <Header/>\n\t\t\t\t<Grid>\n\t\t\t\t    <Grid.Row>\n\n\t\t\t\t\t      <Grid.Column width={11}>\n\t\t\t\t\t      <LandingPageSection1\n\t\t\t\t\t      contractCode={this.state.contractCode}\n\t\t\t\t\t      removeErrorMessage = {this.removeErrorMessage}\n\t\t\t\t\t      loading = {this.state.loading}\n\t\t\t\t\t      successMessage = {this.state.successMessage}\n\t\t\t\t\t      errorMessage = {this.state.errorMessage}\n\t\t\t\t\t      percent = {this.state.percent}\n\t\t\t\t\t      storeContractCodeToState = {this.storeContractCodeToState}\n\t\t\t\t\t      />\n\t\t\t\t\t      </Grid.Column>\n\n\n\t\t\t\t\t      <Grid.Column width={4}>\n\t\t\t\t\t      <LandingPageSection2 \n\t\t\t\t\t      warningsList = {this.state.warningsList}\n\t\t\t\t\t      renderedList = {this.state.renderedList}\n\t\t\t\t\t      gasEstimate = {this.state.gasEstimate}\n\t\t\t\t\t      removeErrorMessage = {this.removeErrorMessage}\n\t\t\t\t\t      loading = {this.state.loading}\n\t\t\t\t\t      noOfLines = {this.state.noOfLines}\n\t\t\t\t\t      timeOfAudit = {this.state.timeOfAudit}\n\t\t\t\t\t      onSubmit ={this.onSubmit}\n\t\t\t\t\t      selectCompiler = {this.selectCompiler}\n\t\t\t\t\t      />\n\t\t\t\t\t      </Grid.Column>\n\n\t\t\t\t\t      <Grid.Column width={1}>\n\t\t\t\t\t              <Modal open={this.state.modalOpen} onClose={this.handleClose} trigger={<Button onClick={this.handleOpen} style={{marginTop:'775px'}} basic circular icon='comment alternate outline' size='huge'>Suggestion Box</Button>}>\n\t\t\t\t\t\t\t\t    <Modal.Header style={{fontSize:'19px',color:'grey'}}>\n\t\t\t\t\t\t\t\t    Thank you for taking the time to leave some feedback, I am a solo enthusiast who created this auditor for fun and to contribute to our beautiful ecosystem,\n\t\t\t\t\t\t\t\t    I appreciate all suggestions, contributions and feedback to help improve this platform.\n\t\t\t\t\t\t\t\t    </Modal.Header>\n\t\t\t\t\t\t\t\t    <Modal.Content image>\n\t\t\t\t\t\t\t\t      <Modal.Description>\n\t\t\t\t\t\t\t\t        <Form>\n\t\t\t\t\t\t\t\t        <Input onChange={this.userNameToState} value={this.state.userName} label='Name(optional)' placeholder='John Doe.....' />\n\t\t\t\t\t\t\t\t        <Input onChange={this.userContactInfoToState} value={this.state.userContactInfo} label='Contact Information' placeholder='Email, Telegram,Git..etc' />\n\t\t\t\t\t\t\t\t        <br/>\n\t\t\t\t\t\t\t\t        <br/>\n\t\t\t\t\t\t\t\t        <TextArea onChange={this.userSuggestionToState} value={this.state.userSuggestion} style ={{width:'850px',height:'100px'}} placeholder=\"Please enter your message here...\"/>\n\t\t\t\t\t\t\t\t      \t<br/>\n\t\t\t\t\t\t\t\t      \t<br/>\n\t\t\t\t\t\t\t\t      \t<Button floated='right' secondary onClick={this.saveUserSuggestionToState}>Submit</Button>\n\t\t\t\t\t\t\t\t        </Form>\n\t\t\t\t\t\t\t\t        <h4 style={{color:'gray'}}>ETH Address: 0x001FabDCb503f618ceE9d79D949301EEBC170647</h4>\n\t\t\t\t\t\t\t\t      </Modal.Description>\n\t\t\t\t\t\t\t\t    </Modal.Content>\n\t\t\t\t\t\t\t\t  </Modal>\n\t\t\t\t\t      </Grid.Column>\n\n\t\t\t\t    </Grid.Row>\n\t\t\t    </Grid>\n\n\t\t  </Container>\n\t\t<h4 style={{marginLeft:'380px',color:'gray'}}>Suggestions and Contributions are welcome ETH Address: 0x001FabDCb503f618ceE9d79D949301EEBC170647</h4>\n\t\t  </div>\n\t\t  )\n\n\t}\n}\n\nexport default landingPage;"]},"metadata":{},"sourceType":"module"}