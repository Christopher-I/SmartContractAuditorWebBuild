{"ast":null,"code":"var keccak = require('keccak');\n\nfunction keccak256(input) {\n  return keccak('keccak256').update(input).digest();\n}\n\nfunction libraryHashPlaceholder(input) {\n  return '$' + keccak256(input).toString('hex').slice(0, 34) + '$';\n}\n\nvar linkBytecode = function (bytecode, libraries) {\n  // NOTE: for backwards compatibility support old compiler which didn't use file names\n  var librariesComplete = {};\n\n  for (var libraryName in libraries) {\n    if (typeof libraries[libraryName] === 'object') {\n      // API compatible with the standard JSON i/o\n      for (var lib in libraries[libraryName]) {\n        librariesComplete[lib] = libraries[libraryName][lib];\n        librariesComplete[libraryName + ':' + lib] = libraries[libraryName][lib];\n      }\n    } else {\n      // backwards compatible API for early solc-js versions\n      var parsed = libraryName.match(/^([^:]+):(.+)$/);\n\n      if (parsed) {\n        librariesComplete[parsed[2]] = libraries[libraryName];\n      }\n\n      librariesComplete[libraryName] = libraries[libraryName];\n    }\n  }\n\n  for (libraryName in librariesComplete) {\n    var hexAddress = librariesComplete[libraryName];\n\n    if (hexAddress.slice(0, 2) !== '0x' || hexAddress.length > 42) {\n      throw new Error('Invalid address specified for ' + libraryName);\n    } // remove 0x prefix\n\n\n    hexAddress = hexAddress.slice(2);\n    hexAddress = Array(40 - hexAddress.length + 1).join('0') + hexAddress; // Support old (library name) and new (hash of library name)\n    // placeholders.\n\n    var replace = function (name) {\n      // truncate to 37 characters\n      var truncatedName = name.slice(0, 36);\n      var libLabel = '__' + truncatedName + Array(37 - truncatedName.length).join('_') + '__';\n\n      while (bytecode.indexOf(libLabel) >= 0) {\n        bytecode = bytecode.replace(libLabel, hexAddress);\n      }\n    };\n\n    replace(libraryName);\n    replace(libraryHashPlaceholder(libraryName));\n  }\n\n  return bytecode;\n};\n\nvar findLinkReferences = function (bytecode) {\n  // find 40 bytes in the pattern of __...<36 digits>...__\n  // e.g. __Lib.sol:L_____________________________\n  var linkReferences = {};\n  var offset = 0;\n\n  while (true) {\n    var found = bytecode.match(/__(.{36})__/);\n\n    if (!found) {\n      break;\n    }\n\n    var start = found.index; // trim trailing underscores\n    // NOTE: this has no way of knowing if the trailing underscore was part of the name\n\n    var libraryName = found[1].replace(/_+$/gm, '');\n\n    if (!linkReferences[libraryName]) {\n      linkReferences[libraryName] = [];\n    }\n\n    linkReferences[libraryName].push({\n      // offsets are in bytes in binary representation (and not hex)\n      start: (offset + start) / 2,\n      length: 20\n    });\n    offset += start + 20;\n    bytecode = bytecode.slice(start + 20);\n  }\n\n  return linkReferences;\n};\n\nmodule.exports = {\n  linkBytecode: linkBytecode,\n  findLinkReferences: findLinkReferences\n};","map":null,"metadata":{},"sourceType":"script"}