{"ast":null,"code":"var _jsxFileName = \"/Users/chris/Documents/BlockchainProjects/SmartContractAuditor/SmartContractAuditor/src/components/App.js\";\nimport React from 'react';\nimport { Container, Form, TextArea, Input, Grid, List, Button, Modal } from 'semantic-ui-react';\nimport Auditor from '../auditor/Auditor';\nimport LandingPageSection1 from './sections/landingPageSection1';\nimport LandingPageSection2 from './sections/landingPageSection2';\nimport sampleContract from '../sampleContract/sampleContract';\nimport Web3 from 'web3';\n\nclass landingPage extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentCompiler: '',\n      contractCode: '',\n      creationCost: '',\n      executionCost: '',\n      gasEstimate: '',\n      timeOfAudit: '',\n      fileSize: '',\n      vunerabiltiesFound: '',\n      noOfLines: '',\n      percent: '',\n      errorMessage: '',\n      successMessage: '',\n      renderedList: \"\",\n      loading: false,\n      suggestions: [],\n      userName: '',\n      userContactInfo: '',\n      userSuggestion: '',\n      modalOpen: false,\n      errorLines: '0',\n      lineNumbers: ''\n    };\n\n    this.setTimeOfAudit = () => {\n      let today = new Date();\n      let date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\n      let time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n      let dateTime = date + ' ' + time;\n      this.setState({\n        timeOfAudit: dateTime\n      });\n    };\n\n    this.selectCompiler = compiler => {\n      this.setState({\n        currentCompiler: compiler\n      });\n    };\n\n    this.storeContractCodeToState = contractCode => {\n      //console.log(contractCode);\n      this.setState({\n        contractCode: contractCode\n      });\n    };\n\n    this.removeErrorMessage = () => {\n      this.setState({\n        warningsList: '',\n        creationCost: '',\n        executionCost: '',\n        gasEstimate: '',\n        timeOfAudit: '',\n        fileSize: '',\n        loading: false,\n        vunerabiltiesFound: '',\n        noOfLines: '',\n        percent: '',\n        errorMessage: '',\n        successMessage: '',\n        renderedList: \"\",\n        numberedList: ''\n      });\n    };\n\n    this.renderWarningList = warnings => {\n      //update loading bar\n      this.setState({\n        //percent: '75',\n        warningsList: warnings.length\n      }); //create an array for all lines that have errors/warnings\n\n      let errorLines = [];\n      warnings.map(warnings => {\n        errorLines.push(warnings.key);\n      });\n      let rndm = 0;\n      let list = warnings.map(warnings => {\n        return React.createElement(List.Item, {\n          key: rndm++,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107\n          },\n          __self: this\n        }, React.createElement(List.Content, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        }, React.createElement(List.Header, {\n          as: \"a\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        }, \"line \", warnings.key), React.createElement(List.Description, {\n          as: \"a\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        }, warnings.value)));\n      }); //update loading bar\n\n      this.setState({\n        percent: '100',\n        loading: false,\n        renderedList: list,\n        errorLines: errorLines\n      });\n\n      if (!!errorLines) {}\n    };\n\n    this.generateNumberedList = () => {\n      let x = lineNumbers();\n      let list = x.map(numbers => {\n        return React.createElement(Table.Row, {\n          key: numbers,\n          warning: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137\n          },\n          __self: this\n        }, React.createElement(Table.Cell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138\n          },\n          __self: this\n        }, numbers));\n      }); //update loading bar\n\n      this.setState({\n        numberedList: list\n      });\n    };\n\n    this.auditCode = dataArray => {\n      return Auditor(dataArray);\n    };\n\n    this.onSubmit = async () => {\n      //check if compiler is selected by user else notify user\n      if (this.state.currentCompiler) {\n        this.setTimeOfAudit();\n        let self = this; //notify user of progress\n\n        this.setState({\n          loading: true,\n          errorMessage: '',\n          successMessage: ''\n        }); //store contract code to state and prepare for compile and audit\n\n        let source = this.state.contractCode; //split code into array based on each new line\n\n        let dataArray = source.split(\"\\n\");\n        let dataArrayLength = dataArray.length;\n        console.log(\"data array is \" + dataArrayLength); //update loading bar\n\n        self.setState({\n          percent: '25'\n        }); //printlist of available compilers\n\n        window.BrowserSolc.getVersions(function (soljsonSources, soljsonReleases) {//console.log(soljsonSources);\n          //console.log(soljsonReleases);\n        }); //Load a chosen compiler version\n\n        window.BrowserSolc.loadVersion(this.state.currentCompiler, async function (compiler) {\n          let optimize = 1;\n          let result = compiler.compile(source, optimize); // result = JSON.stringify(result);\n          // result = JSON.parse(result);\n          //console.log(result.contracts);\n\n          let contractName = Object.keys(result.contracts)[0]; //check for errrors in compilation\n\n          if (result.errors && !result.sources[\"\"]) {\n            //save all warning and errors to state\n            self.setState({\n              errorMessage: result.errors[0]\n            });\n          } else {\n            //   \t//check for warnings in compilation\n            //   \tif(result.errors){\n            //   //save all warning and errors to state\n            //   self.setState({\n            //   \t\terrorMessage: result.errors[0]\n            //   \t})\n            // }\n            const provider = new Web3.providers.HttpProvider('https://rinkeby.infura.io/v3/c3085f6dbf9347358b5ab5d30de1fdbe');\n            const web3 = new Web3(provider); //console.log(result);\n\n            let bytecode = result.contracts[contractName].bytecode; //compilation was succesful, auditing and updating general stats begins at this point \n            //compute total gas cost which is the estimated creation cost plus the execution cost\n            // let totalGasCost = result.contracts[\":Migrations\"].gasEstimates.creation[0]+result.contracts[\":Migrations\"].gasEstimates.creation[1];\n\n            self.setState({\n              noOfLines: dataArrayLength,\n              // creationCost:result.contracts[\":Migrations\"].gasEstimates.creation[0],\n              // executionCost:result.contracts[\":Migrations\"].gasEstimates.creation[1],\n              gasEstimate: await web3.eth.estimateGas({\n                to: \"0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe\",\n                data: \"0x\" + bytecode\n              }),\n              percent: 50,\n              successMessage: \"Audit Complete!\"\n            }); //console.log(\"gas estimate is \" + self.state.gasEstimate)\n            //send contract code to auditor and await feed back of array of warnings\n\n            let warnings = self.auditCode(dataArray);\n            self.setState({\n              percent: 75\n            }); //send array of warnings to renderList function to create organized JSX and update state\n\n            self.renderWarningList(warnings);\n          }\n        });\n      } else {\n        this.setState({\n          errorMessage: \"Please select a compiler\",\n          loading: false\n        });\n      }\n    };\n\n    this.saveUserSuggestionToState = evt => {\n      evt.preventDefault();\n      let userSuggestion = {};\n      userSuggestion.name = this.state.userName;\n      userSuggestion.contactInfo = this.state.userContactInfo;\n      userSuggestion.suggestion = this.state.userSuggestion;\n      let currentSuggestions = this.state.suggestions;\n      currentSuggestions.push(userSuggestion);\n      this.setState({\n        suggestions: currentSuggestions,\n        modalOpen: false\n      });\n      console.log(this.state.suggestions);\n    };\n\n    this.userNameToState = event => {\n      this.setState({\n        userName: event.target.value\n      });\n    };\n\n    this.userContactInfoToState = event => {\n      this.setState({\n        userContactInfo: event.target.value\n      });\n    };\n\n    this.userSuggestionToState = event => {\n      this.setState({\n        userSuggestion: event.target.value\n      });\n    };\n\n    this.handleOpen = () => this.setState({\n      modalOpen: true\n    });\n\n    this.handleClose = () => this.setState({\n      modalOpen: false\n    });\n  }\n\n  componentDidMount() {\n    this.setState({\n      contractCode: sampleContract()\n    });\n  } //get Time of Audit\n\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }, React.createElement(Container, {\n      style: {\n        width: '1300px',\n        marginTop: '10px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }, React.createElement(Grid.Row, {\n      key: \"gridRow1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      width: 11,\n      key: \"gridColumn1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323\n      },\n      __self: this\n    }, React.createElement(LandingPageSection1, {\n      contractCode: this.state.contractCode,\n      removeErrorMessage: this.removeErrorMessage,\n      loading: this.state.loading,\n      successMessage: this.state.successMessage,\n      errorMessage: this.state.errorMessage,\n      percent: this.state.percent,\n      storeContractCodeToState: this.storeContractCodeToState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    })), React.createElement(Grid.Column, {\n      width: 4,\n      key: \"gridColumn2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }, React.createElement(LandingPageSection2, {\n      warningsList: this.state.warningsList,\n      generateNumberedList: this.generateNumberedList,\n      numberedList: this.state.numberedList,\n      renderedList: this.state.renderedList,\n      gasEstimate: this.state.gasEstimate,\n      removeErrorMessage: this.removeErrorMessage,\n      loading: this.state.loading,\n      noOfLines: this.state.noOfLines,\n      timeOfAudit: this.state.timeOfAudit,\n      onSubmit: this.onSubmit,\n      selectCompiler: this.selectCompiler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    })), React.createElement(Grid.Column, {\n      width: 1,\n      key: \"gridColumn3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352\n      },\n      __self: this\n    }, React.createElement(Modal, {\n      open: this.state.modalOpen,\n      onClose: this.handleClose,\n      trigger: React.createElement(Button, {\n        onClick: this.handleOpen,\n        style: {\n          marginTop: '775px'\n        },\n        basic: true,\n        circular: true,\n        size: \"huge\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 353\n        },\n        __self: this\n      }, \"Suggestion Box\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353\n      },\n      __self: this\n    }, React.createElement(Modal.Header, {\n      style: {\n        fontSize: '19px',\n        color: 'grey'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354\n      },\n      __self: this\n    }, \"Thank you for taking the time to leave some feedback, I am a solo enthusiast who created this auditor for fun and to contribute to our beautiful ecosystem, I appreciate all suggestions, contributions and feedback to help improve this platform.\"), React.createElement(Modal.Content, {\n      image: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358\n      },\n      __self: this\n    }, React.createElement(Modal.Description, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359\n      },\n      __self: this\n    }, React.createElement(Form, {\n      name: \"contact\",\n      netlify: true,\n      \"data-netlify\": \"true\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360\n      },\n      __self: this\n    }, React.createElement(Input, {\n      name: \"First Name\",\n      onChange: this.userNameToState,\n      value: this.state.userName,\n      label: \"Name(optional)\",\n      placeholder: \"John Doe.....\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    }), React.createElement(Input, {\n      name: \"email\",\n      onChange: this.userContactInfoToState,\n      value: this.state.userContactInfo,\n      label: \"Contact Information\",\n      placeholder: \"Email, Telegram,Git..etc\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364\n      },\n      __self: this\n    }), React.createElement(TextArea, {\n      name: \"suggestions\",\n      onChange: this.userSuggestionToState,\n      value: this.state.userSuggestion,\n      style: {\n        width: '850px',\n        height: '100px'\n      },\n      placeholder: \"Please enter your message here...\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    }), React.createElement(Button, {\n      floated: \"right\",\n      secondary: true,\n      onClick: this.saveUserSuggestionToState,\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    }, \"Submit\")), React.createElement(\"h4\", {\n      style: {\n        color: 'gray'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370\n      },\n      __self: this\n    }, \"ETH Address: 0x001FabDCb503f618ceE9d79D949301EEBC170647\")))))))), React.createElement(\"h4\", {\n      style: {\n        marginLeft: '380px',\n        color: 'gray'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380\n      },\n      __self: this\n    }, \"Suggestions and Contributions are welcome ETH Address: 0x001FabDCb503f618ceE9d79D949301EEBC170647\"));\n  }\n\n}\n\nexport default landingPage;\n\nconst lineNumbers = () => {\n  let array = [];\n  let i;\n\n  for (i = 1; i < 1001; i++) {\n    array.push(i); //[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25];\n  }\n\n  return array;\n};","map":{"version":3,"sources":["/Users/chris/Documents/BlockchainProjects/SmartContractAuditor/SmartContractAuditor/src/components/App.js"],"names":["React","Container","Form","TextArea","Input","Grid","List","Button","Modal","Auditor","LandingPageSection1","LandingPageSection2","sampleContract","Web3","landingPage","Component","state","currentCompiler","contractCode","creationCost","executionCost","gasEstimate","timeOfAudit","fileSize","vunerabiltiesFound","noOfLines","percent","errorMessage","successMessage","renderedList","loading","suggestions","userName","userContactInfo","userSuggestion","modalOpen","errorLines","lineNumbers","setTimeOfAudit","today","Date","date","getFullYear","getMonth","getDate","time","getHours","getMinutes","getSeconds","dateTime","setState","selectCompiler","compiler","storeContractCodeToState","removeErrorMessage","warningsList","numberedList","renderWarningList","warnings","length","map","push","key","rndm","list","value","generateNumberedList","x","numbers","auditCode","dataArray","onSubmit","self","source","split","dataArrayLength","console","log","window","BrowserSolc","getVersions","soljsonSources","soljsonReleases","loadVersion","optimize","result","compile","contractName","Object","keys","contracts","errors","sources","provider","providers","HttpProvider","web3","bytecode","eth","estimateGas","to","data","saveUserSuggestionToState","evt","preventDefault","name","contactInfo","suggestion","currentSuggestions","userNameToState","event","target","userContactInfoToState","userSuggestionToState","handleOpen","handleClose","componentDidMount","render","width","marginTop","fontSize","color","height","marginLeft","array","i"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Container, Form, TextArea,Input, Grid,List,Button,Modal } from 'semantic-ui-react';\nimport Auditor from '../auditor/Auditor';\nimport LandingPageSection1 from './sections/landingPageSection1';\nimport LandingPageSection2 from './sections/landingPageSection2';\nimport sampleContract from '../sampleContract/sampleContract';\nimport Web3 from 'web3';\n\n\nclass landingPage extends React.Component{\n\n\tstate = {\n\t\tcurrentCompiler:'',\n\t\tcontractCode:'',\n\t\tcreationCost:'',\n\t\texecutionCost:'',\n\t\tgasEstimate:'',\n\t\ttimeOfAudit:'',\n\t\tfileSize: '',\n\t\tvunerabiltiesFound: '',\n\t\tnoOfLines: '',\n\t\tpercent:'',\n\t\terrorMessage:'',\n\t\tsuccessMessage:'',\n\t\trenderedList:\"\",\n\t\tloading:false,\n\t\tsuggestions:[],\n\t\tuserName:'',\n\t\tuserContactInfo:'',\n\t\tuserSuggestion:'',\n\t\tmodalOpen:false,\n\t\terrorLines:'0',\n\t\tlineNumbers:''\n\t}\n\n\tcomponentDidMount(){\n\t\tthis.setState({\n\t\t\tcontractCode:sampleContract()\n\t\t})\n\t}\n\n\t//get Time of Audit\n\tsetTimeOfAudit=()=>{\n\n\t\tlet today = new Date();\n\t\tlet date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\n\t\tlet time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n\t\tlet dateTime = date+' '+time;\n\n\t\tthis.setState({\n\t\t\ttimeOfAudit: dateTime\n\t\t})\n\t}\n\n\t//receive compiler version from child component-landingPageSection1 and store it to state\n\tselectCompiler =(compiler)=>{\n\t\tthis.setState({\n\t\t\tcurrentCompiler:compiler\n\t\t})\n\t}\n\n\t//receive contract code from child component-landingPageSection2 and store it to state\n\tstoreContractCodeToState=(contractCode)=>{\n\t\t//console.log(contractCode);\n\t\tthis.setState({\n\t\t\tcontractCode: contractCode\n\t\t})\n\t}\n//reset all neccesary variable when screen is clicked, drop down is selected and other similar events\n\tremoveErrorMessage=()=>{\n\t\tthis.setState({\n\t\twarningsList:'',\n\t\tcreationCost:'',\n\t\texecutionCost:'',\n\t\tgasEstimate:'',\n\t\ttimeOfAudit:'',\n\t\tfileSize: '',\n\t\tloading:false,\n\t\tvunerabiltiesFound: '',\n\t\tnoOfLines: '',\n\t\tpercent:'',\n\t\terrorMessage:'',\n\t\tsuccessMessage:'',\n\t\trenderedList:\"\",\n\t\tnumberedList:''\n\t\t})\n\t}\n\n\n\trenderWarningList=(warnings)=>{\n\n\t\t //update loading bar\n      \tthis.setState({\n\t\t  \t\t//percent: '75',\n\t\t  \t\twarningsList:warnings.length\n\t\t  \t})\n\n    //create an array for all lines that have errors/warnings\n    let errorLines = [];\n\t    warnings.map(warnings => {   \n\t    \terrorLines.push(warnings.key)     \n\t        });\n   \n\tlet rndm = 0;\n\tlet list = warnings.map(warnings => {        \n            return (\n                <List.Item key={rndm++}>\n                          <List.Content>\n                            <List.Header as='a'>line {warnings.key}</List.Header>\n                            <List.Description as='a'>{warnings.value}</List.Description>\n                          </List.Content>\n                    </List.Item>\n            );   \n        });\n\n\t     //update loading bar\n        this.setState({\n\t\t  \t\tpercent: '100',\n\t\t  \t\tloading: false,\n\t\t  \t\trenderedList:list,\n\t\t  \t\terrorLines:errorLines\n\t\t  \t})\n\n        if(!!errorLines){\n\n        }\n        \n\n\t}\n\n\t//generate rendered number list on left side of contract page 1 \n\tgenerateNumberedList=()=>{\n\t\tlet x = lineNumbers();\n\n\t\tlet list = x.map(numbers => {        \n            return (\n            \t<Table.Row key={numbers} warning>\n\t\t\t\t        <Table.Cell >\n\t\t\t\t          {numbers}\n\t\t\t\t        </Table.Cell>\n\t\t\t\t </Table.Row>\n            );   \n        });\n\n\t     //update loading bar\n        this.setState({\n\t\t  \t\tnumberedList :list\n\n\t\t  \t})\n\n\t}\n\n\n\tauditCode=(dataArray)=>{\n        return Auditor(dataArray);\n\n    }\n\n\t//Compile contract and run audit\n\tonSubmit = async()=>{\n\t\t//check if compiler is selected by user else notify user\n\t\tif(this.state.currentCompiler){\n\t\tthis.setTimeOfAudit();\n\t\tlet self = this;\n\n\n\t\t//notify user of progress\n\t\tthis.setState({\n\t\t  \t\tloading: true,\n\t\t  \t\terrorMessage:'',\n\t\t  \t\tsuccessMessage:''\n\t\t  \t})\n\n\t\t//store contract code to state and prepare for compile and audit\n\t\tlet source = this.state.contractCode;\n\t\t//split code into array based on each new line\n        let dataArray = source.split(\"\\n\");\n        let dataArrayLength = dataArray.length;\n        console.log(\"data array is \" + dataArrayLength);\n\n        //update loading bar\n        self.setState({\n\t\t  \t\tpercent: '25'\n\t\t  \t})\n\t\t\n\t\t//printlist of available compilers\n\t\twindow.BrowserSolc.getVersions(function(soljsonSources, soljsonReleases) {\n\t\t  //console.log(soljsonSources);\n\t\t  //console.log(soljsonReleases);\n\t\t});\n\n\t\t//Load a chosen compiler version\n\t\twindow.BrowserSolc.loadVersion(this.state.currentCompiler, async function (compiler){\n\t\t\n\t\t  let optimize = 1;\n\t\t  let result = compiler.compile(source, optimize);\n\t\t  // result = JSON.stringify(result);\n\t\t  // result = JSON.parse(result);\n\t\t  //console.log(result.contracts);\n\t\t  let contractName = Object.keys(result.contracts)[0];\n\n\t\t  \t//check for errrors in compilation\n\t\t  if(result.errors && !result.sources[\"\"]){\n\n\t\t  //save all warning and errors to state\n\t\t  self.setState({\n\t\t  \t\terrorMessage: result.errors[0]\n\t\t  \t})\n\n\t\t  }else {\n\t\t//   \t//check for warnings in compilation\n\t\t//   \tif(result.errors){\n\t\t  \t\n\n\t\t//   //save all warning and errors to state\n\t\t//   self.setState({\n\t\t//   \t\terrorMessage: result.errors[0]\n\t\t//   \t})\n\t\t// }\n\t\t  \n\t\t   const provider = new Web3.providers.HttpProvider(\n\t\t    'https://rinkeby.infura.io/v3/c3085f6dbf9347358b5ab5d30de1fdbe'\n\t\t  )\n\t\t   const web3 = new Web3(provider);\n\t\t   //console.log(result);\n\n\t\t   let bytecode = result.contracts[contractName].bytecode;\n\n\t\t   \n\n\t\t  \t//compilation was succesful, auditing and updating general stats begins at this point \n\n\t\t  \t//compute total gas cost which is the estimated creation cost plus the execution cost\n\t\t // let totalGasCost = result.contracts[\":Migrations\"].gasEstimates.creation[0]+result.contracts[\":Migrations\"].gasEstimates.creation[1];\n\n\t\t  \tself.setState({\n\t\t  \t\tnoOfLines:dataArrayLength,\n\t\t  \t\t// creationCost:result.contracts[\":Migrations\"].gasEstimates.creation[0],\n\t\t  \t\t// executionCost:result.contracts[\":Migrations\"].gasEstimates.creation[1],\n\t\t  \t\tgasEstimate : await web3.eth.estimateGas({\n\t\t\t\t    to: \"0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe\",\n\t\t\t\t    data: \"0x\" + bytecode\n\t\t\t\t}),\n\t\t  \t\tpercent: 50,\n\t\t  \t\tsuccessMessage:\"Audit Complete!\"\n\t\t  \t})\n\n\n\t\t  \t//console.log(\"gas estimate is \" + self.state.gasEstimate)\n\t\t  \t//send contract code to auditor and await feed back of array of warnings\n\t\t  \tlet warnings = self.auditCode(dataArray);\n\t\t  \tself.setState({\n\t\t  \t\tpercent: 75,\n\t\t  \t})\n\n\n\t\t  \t//send array of warnings to renderList function to create organized JSX and update state\n\t\t  \tself.renderWarningList(warnings);\n\n\t\t }\n\t\n\t\t});\n\n\t}else{\n\t\tthis.setState({\n\t\t\terrorMessage:\"Please select a compiler\",\n\t\t\tloading: false\n\t\t})\n\n\t}\n\n\t}\n\n\tsaveUserSuggestionToState=(evt)=>{\n\t\tevt.preventDefault()\n\t\tlet userSuggestion ={}\n\t\tuserSuggestion.name = this.state.userName;\n\t\tuserSuggestion.contactInfo = this.state.userContactInfo;\n\t\tuserSuggestion.suggestion= this.state.userSuggestion;\n\t\tlet currentSuggestions = this.state.suggestions;\n\t\tcurrentSuggestions.push(userSuggestion);\n\n\t\tthis.setState({\n\t\t\tsuggestions:currentSuggestions,\n\t\t\tmodalOpen:false\n\t\t})\n\nconsole.log(this.state.suggestions);\n\t}\n\n\tuserNameToState=(event)=>{\n\t\tthis.setState({\n\t\t\tuserName:event.target.value\n\t\t})\n\t}\n\n\tuserContactInfoToState=(event)=>{\n\t\tthis.setState({\n\t\t\tuserContactInfo:event.target.value\n\t\t})\n\t}\n\n\tuserSuggestionToState=(event)=>{\n\t\tthis.setState({\n\t\t\tuserSuggestion:event.target.value\n\t\t})\n\t}\n\n\thandleOpen = () => this.setState({ modalOpen: true })\n\n    handleClose = () => this.setState({ modalOpen: false })\n\n\n\trender(){\n\n\t\treturn(\n\t\t\t<div >\n\n\t\t\t<Container style={{width:'1300px', marginTop:'10px'}}>\n\t\t\t\t<Grid>\n\t\t\t\t    <Grid.Row key ={\"gridRow1\"}>\n\n\t\t\t\t\t      <Grid.Column width={11} key ={\"gridColumn1\"}>\n\t\t\t\t\t      <LandingPageSection1\n\t\t\t\t\t      contractCode={this.state.contractCode}\n\t\t\t\t\t      removeErrorMessage = {this.removeErrorMessage}\n\t\t\t\t\t      loading = {this.state.loading}\n\t\t\t\t\t      successMessage = {this.state.successMessage}\n\t\t\t\t\t      errorMessage = {this.state.errorMessage}\n\t\t\t\t\t      percent = {this.state.percent}\n\t\t\t\t\t      storeContractCodeToState = {this.storeContractCodeToState}\n\t\t\t\t\t      />\n\t\t\t\t\t      </Grid.Column>\n\n\n\t\t\t\t\t      <Grid.Column width={4} key ={\"gridColumn2\"}>\n\t\t\t\t\t      <LandingPageSection2 \n\t\t\t\t\t      warningsList = {this.state.warningsList}\n\t\t\t\t\t      generateNumberedList = {this.generateNumberedList}\n\t\t\t\t\t      numberedList = {this.state.numberedList}\n\t\t\t\t\t      renderedList = {this.state.renderedList}\n\t\t\t\t\t      gasEstimate = {this.state.gasEstimate}\n\t\t\t\t\t      removeErrorMessage = {this.removeErrorMessage}\n\t\t\t\t\t      loading = {this.state.loading}\n\t\t\t\t\t      noOfLines = {this.state.noOfLines}\n\t\t\t\t\t      timeOfAudit = {this.state.timeOfAudit}\n\t\t\t\t\t      onSubmit ={this.onSubmit}\n\t\t\t\t\t      selectCompiler = {this.selectCompiler}\n\t\t\t\t\t      />\n\t\t\t\t\t      </Grid.Column>\n\n\t\t\t\t\t      <Grid.Column width={1} key ={\"gridColumn3\"}>\n\t\t\t\t\t              <Modal open={this.state.modalOpen} onClose={this.handleClose} trigger={<Button onClick={this.handleOpen} style={{marginTop:'775px'}} basic circular size='huge'>Suggestion Box</Button>}>\n\t\t\t\t\t\t\t\t    <Modal.Header style={{fontSize:'19px',color:'grey'}}>\n\t\t\t\t\t\t\t\t    Thank you for taking the time to leave some feedback, I am a solo enthusiast who created this auditor for fun and to contribute to our beautiful ecosystem,\n\t\t\t\t\t\t\t\t    I appreciate all suggestions, contributions and feedback to help improve this platform.\n\t\t\t\t\t\t\t\t    </Modal.Header>\n\t\t\t\t\t\t\t\t    <Modal.Content image>\n\t\t\t\t\t\t\t\t      <Modal.Description>\n\t\t\t\t\t\t\t\t        <Form name=\"contact\" netlify data-netlify=\"true\">\n\t\t\t\t\t\t\t\t        <Input name=\"First Name\"onChange={this.userNameToState} value={this.state.userName} label='Name(optional)' placeholder='John Doe.....' />\n\t\t\t\t\t\t\t\t        <Input name=\"email\" onChange={this.userContactInfoToState} value={this.state.userContactInfo} label='Contact Information' placeholder='Email, Telegram,Git..etc' />\n\t\t\t\t\t\t\t\t        <br/>\n\t\t\t\t\t\t\t\t        <br/>\n\t\t\t\t\t\t\t\t        <TextArea name=\"suggestions\" onChange={this.userSuggestionToState} value={this.state.userSuggestion} style ={{width:'850px',height:'100px'}} placeholder=\"Please enter your message here...\"/>\n\t\t\t\t\t\t\t\t      \t<br/>\n\t\t\t\t\t\t\t\t      \t<br/>\n\t\t\t\t\t\t\t\t      \t<Button floated='right' secondary onClick={this.saveUserSuggestionToState} type=\"submit\">Submit</Button>\n\t\t\t\t\t\t\t\t        </Form>\n\t\t\t\t\t\t\t\t        <h4 style={{color:'gray'}}>ETH Address: 0x001FabDCb503f618ceE9d79D949301EEBC170647</h4>\n\t\t\t\t\t\t\t\t      </Modal.Description>\n\t\t\t\t\t\t\t\t    </Modal.Content>\n\t\t\t\t\t\t\t\t  </Modal>\n\t\t\t\t\t      </Grid.Column>\n\n\t\t\t\t    </Grid.Row>\n\t\t\t    </Grid>\n\n\t\t  </Container>\n\t\t<h4 style={{marginLeft:'380px',color:'gray'}}>Suggestions and Contributions are welcome ETH Address: 0x001FabDCb503f618ceE9d79D949301EEBC170647</h4>\n\t\t  </div>\n\t\t  )\n\n\t}\n}\n\nexport default landingPage;\n\n\nconst lineNumbers=()=>{\n\t\tlet array=[];\n\t\tlet i;\n\n\t\tfor (i=1; i<1001; i++){\n\t\t\tarray.push(i);\n\t\t//[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25];\n\t}\n\n\treturn array;\n\n\t} "]},"metadata":{},"sourceType":"module"}