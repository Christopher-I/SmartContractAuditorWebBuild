{"ast":null,"code":"var _jsxFileName = \"/Users/chris/Documents/BlockchainProjects/SmartContractAuditor/SmartContractAuditor/src/components/App.js\";\nimport React from \"react\";\nimport { Container, Form, TextArea, Input, Grid, List, Button, Modal, Table } from \"semantic-ui-react\";\nimport Auditor from \"../auditor/Auditor\";\nimport LandingPageSection1 from \"./sections/landingPageSection1\";\nimport LandingPageSection2 from \"./sections/landingPageSection2\";\nimport sampleContract from \"../sampleContract/sampleContract\";\nimport Web3 from \"web3\";\n\nclass landingPage extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentCompiler: \"\",\n      contractCode: \"\",\n      creationCost: \"\",\n      executionCost: \"\",\n      gasEstimate: \"\",\n      timeOfAudit: \"\",\n      fileSize: \"\",\n      vunerabiltiesFound: \"\",\n      noOfLines: \"\",\n      percent: \"\",\n      errorMessage: \"\",\n      successMessage: \"\",\n      renderedList: \"\",\n      loading: false,\n      suggestions: [],\n      userName: \"\",\n      userContactInfo: \"\",\n      userSuggestion: \"\",\n      modalOpen: false,\n      errorLines: \"0\",\n      lineNumbers: \"\"\n    };\n\n    this.setTimeOfAudit = () => {\n      let today = new Date();\n      let date = today.getFullYear() + \"-\" + (today.getMonth() + 1) + \"-\" + today.getDate();\n      let time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n      let dateTime = date + \" \" + time;\n      this.setState({\n        timeOfAudit: dateTime\n      });\n    };\n\n    this.selectCompiler = compiler => {\n      this.setState({\n        currentCompiler: compiler\n      });\n    };\n\n    this.storeContractCodeToState = contractCode => {\n      //console.log(contractCode);\n      this.setState({\n        contractCode: contractCode\n      });\n    };\n\n    this.removeErrorMessage = () => {\n      this.setState({\n        warningsList: \"\",\n        creationCost: \"\",\n        executionCost: \"\",\n        gasEstimate: \"\",\n        timeOfAudit: \"\",\n        fileSize: \"\",\n        loading: false,\n        vunerabiltiesFound: \"\",\n        noOfLines: \"\",\n        percent: \"\",\n        errorMessage: \"\",\n        successMessage: \"\",\n        renderedList: \"\"\n      });\n    };\n\n    this.renderWarningList = warnings => {\n      //create an array for all lines that have errors/warnings\n      let errorLines = [];\n      warnings.map(warnings => {\n        errorLines.push(warnings.key);\n      });\n      let rndm = 0;\n      let list = warnings.map(warnings => {\n        return React.createElement(List.Item, {\n          key: rndm++,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116\n          },\n          __self: this\n        }, React.createElement(List.Content, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117\n          },\n          __self: this\n        }, React.createElement(List.Header, {\n          as: \"a\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        }, \"line \", warnings.key), React.createElement(List.Description, {\n          as: \"a\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119\n          },\n          __self: this\n        }, warnings.value)));\n      }); //update loading bar\n\n      this.setState({\n        percent: \"100\",\n        loading: false,\n        renderedList: list,\n        errorLines: errorLines,\n        warningsList: warnings.length\n      }); //if there are warning/errors, update numbered table to indicate their location\n\n      if (!!errorLines) {\n        this.generateNumberedList();\n      }\n    };\n\n    this.generateNumberedList = () => {\n      let x = lineNumbers();\n      let list = x.map(numbers => {\n        //check each line if contains an error\n        let errorLine = this.state.errorLines.includes(numbers);\n        return React.createElement(Table.Row, {\n          key: numbers,\n          error: errorLine,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150\n          },\n          __self: this\n        }, React.createElement(Table.Cell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151\n          },\n          __self: this\n        }, numbers));\n      }); //update loading bar\n\n      this.setState({\n        numberedList: list\n      });\n    };\n\n    this.auditCode = dataArray => {\n      return Auditor(dataArray);\n    };\n\n    this.onSubmit = async () => {\n      //check if compiler is selected by user else notify user\n      if (this.state.currentCompiler) {\n        this.setTimeOfAudit();\n        let self = this; //notify user of progress\n\n        this.setState({\n          loading: true,\n          errorMessage: \"\",\n          successMessage: \"\"\n        }); //store contract code to state and prepare for compile and audit\n\n        let source = this.state.contractCode; //split code into array based on each new line\n\n        let dataArray = source.split(\"\\n\");\n        let dataArrayLength = dataArray.length;\n        console.log(\"data array is \" + dataArrayLength); //update loading bar\n\n        self.setState({\n          percent: \"25\"\n        }); //printlist of available compilers\n\n        window.BrowserSolc.getVersions(function (soljsonSources, soljsonReleases) {//console.log(soljsonSources);\n          //console.log(soljsonReleases);\n        }); //Load a chosen compiler version\n\n        window.BrowserSolc.loadVersion(this.state.currentCompiler, async function (compiler) {\n          let optimize = 1;\n          let result = compiler.compile(source, optimize); // result = JSON.stringify(result);\n          // result = JSON.parse(result);\n          //console.log(result.contracts);\n\n          let contractName = Object.keys(result.contracts)[0]; //check for errrors in compilation\n\n          if (result.errors && !result.sources[\"\"]) {\n            //save all warning and errors to state\n            self.setState({\n              errorMessage: result.errors[0]\n            });\n          } else {\n            //   \t//check for warnings in compilation\n            //   \tif(result.errors){\n            //   //save all warning and errors to state\n            //   self.setState({\n            //   \t\terrorMessage: result.errors[0]\n            //   \t})\n            // }\n            const provider = new Web3.providers.HttpProvider(\"https://rinkeby.infura.io/v3/c3085f6dbf9347358b5ab5d30de1fdbe\");\n            const web3 = new Web3(provider); //console.log(result);\n\n            let bytecode = result.contracts[contractName].bytecode; //compilation was succesful, auditing and updating general stats begins at this point\n            //compute total gas cost which is the estimated creation cost plus the execution cost\n            // let totalGasCost = result.contracts[\":Migrations\"].gasEstimates.creation[0]+result.contracts[\":Migrations\"].gasEstimates.creation[1];\n\n            self.setState({\n              noOfLines: dataArrayLength,\n              // creationCost:result.contracts[\":Migrations\"].gasEstimates.creation[0],\n              // executionCost:result.contracts[\":Migrations\"].gasEstimates.creation[1],\n              gasEstimate: await web3.eth.estimateGas({\n                to: \"0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe\",\n                data: \"0x\" + bytecode\n              }),\n              percent: 50,\n              successMessage: \"Audit Complete!\"\n            }); //console.log(\"gas estimate is \" + self.state.gasEstimate)\n            //send contract code to auditor and await feed back of array of warnings\n\n            let warnings = self.auditCode(dataArray);\n            self.setState({\n              percent: 75\n            }); //send array of warnings to renderList function to create organized JSX and update state\n\n            self.renderWarningList(warnings);\n          }\n        });\n      } else {\n        this.setState({\n          errorMessage: \"Please select a compiler\",\n          loading: false\n        });\n      }\n    };\n\n    this.saveUserSuggestionToState = evt => {\n      evt.preventDefault();\n      let userSuggestion = {};\n      userSuggestion.name = this.state.userName;\n      userSuggestion.contactInfo = this.state.userContactInfo;\n      userSuggestion.suggestion = this.state.userSuggestion;\n      let currentSuggestions = this.state.suggestions;\n      currentSuggestions.push(userSuggestion);\n      this.setState({\n        suggestions: currentSuggestions,\n        modalOpen: false\n      });\n      console.log(this.state.suggestions);\n    };\n\n    this.userNameToState = event => {\n      this.setState({\n        userName: event.target.value\n      });\n    };\n\n    this.userContactInfoToState = event => {\n      this.setState({\n        userContactInfo: event.target.value\n      });\n    };\n\n    this.userSuggestionToState = event => {\n      this.setState({\n        userSuggestion: event.target.value\n      });\n    };\n\n    this.handleOpen = () => this.setState({\n      modalOpen: true\n    });\n\n    this.handleClose = () => this.setState({\n      modalOpen: false\n    });\n  }\n\n  componentDidMount() {\n    this.generateNumberedList();\n    this.setState({\n      contractCode: sampleContract()\n    });\n  } //get Time of Audit\n\n\n  render() {\n    return React.createElement(Container, {\n      style: {\n        width: \"1300px\",\n        marginTop: \"10px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }, React.createElement(Grid.Row, {\n      key: \"gridRow1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      width: 12,\n      key: \"gridColumn1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }, React.createElement(LandingPageSection1, {\n      generateNumberedList: this.generateNumberedList,\n      numberedList: this.state.numberedList,\n      contractCode: this.state.contractCode,\n      removeErrorMessage: this.removeErrorMessage,\n      loading: this.state.loading,\n      successMessage: this.state.successMessage,\n      errorMessage: this.state.errorMessage,\n      percent: this.state.percent,\n      storeContractCodeToState: this.storeContractCodeToState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    })), React.createElement(Grid.Column, {\n      width: 4,\n      key: \"gridColumn2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }, React.createElement(LandingPageSection2, {\n      warningsList: this.state.warningsList,\n      renderedList: this.state.renderedList,\n      gasEstimate: this.state.gasEstimate,\n      removeErrorMessage: this.removeErrorMessage,\n      loading: this.state.loading,\n      noOfLines: this.state.noOfLines,\n      timeOfAudit: this.state.timeOfAudit,\n      onSubmit: this.onSubmit,\n      selectCompiler: this.selectCompiler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    })))), React.createElement(\"h4\", {\n      style: {\n        marginLeft: \"380px\",\n        color: \"gray\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440\n      },\n      __self: this\n    }, \"Suggestions and Contributions https://github.com/Christopher-I/SmartContractAuditorWebBuild ETH Address: 0x001FabDCb503f618ceE9d79D949301EEBC170647\"));\n  }\n\n}\n\nexport default landingPage;\n\nconst lineNumbers = () => {\n  let array = [];\n  let i;\n\n  for (i = 1; i < 1001; i++) {\n    array.push(i); //[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25];\n  }\n\n  return array;\n};","map":{"version":3,"sources":["/Users/chris/Documents/BlockchainProjects/SmartContractAuditor/SmartContractAuditor/src/components/App.js"],"names":["React","Container","Form","TextArea","Input","Grid","List","Button","Modal","Table","Auditor","LandingPageSection1","LandingPageSection2","sampleContract","Web3","landingPage","Component","state","currentCompiler","contractCode","creationCost","executionCost","gasEstimate","timeOfAudit","fileSize","vunerabiltiesFound","noOfLines","percent","errorMessage","successMessage","renderedList","loading","suggestions","userName","userContactInfo","userSuggestion","modalOpen","errorLines","lineNumbers","setTimeOfAudit","today","Date","date","getFullYear","getMonth","getDate","time","getHours","getMinutes","getSeconds","dateTime","setState","selectCompiler","compiler","storeContractCodeToState","removeErrorMessage","warningsList","renderWarningList","warnings","map","push","key","rndm","list","value","length","generateNumberedList","x","numbers","errorLine","includes","numberedList","auditCode","dataArray","onSubmit","self","source","split","dataArrayLength","console","log","window","BrowserSolc","getVersions","soljsonSources","soljsonReleases","loadVersion","optimize","result","compile","contractName","Object","keys","contracts","errors","sources","provider","providers","HttpProvider","web3","bytecode","eth","estimateGas","to","data","saveUserSuggestionToState","evt","preventDefault","name","contactInfo","suggestion","currentSuggestions","userNameToState","event","target","userContactInfoToState","userSuggestionToState","handleOpen","handleClose","componentDidMount","render","width","marginTop","marginLeft","color","array","i"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n\tContainer,\n\tForm,\n\tTextArea,\n\tInput,\n\tGrid,\n\tList,\n\tButton,\n\tModal,\n\tTable\n} from \"semantic-ui-react\";\nimport Auditor from \"../auditor/Auditor\";\nimport LandingPageSection1 from \"./sections/landingPageSection1\";\nimport LandingPageSection2 from \"./sections/landingPageSection2\";\nimport sampleContract from \"../sampleContract/sampleContract\";\nimport Web3 from \"web3\";\n\nclass landingPage extends React.Component {\n\tstate = {\n\t\tcurrentCompiler: \"\",\n\t\tcontractCode: \"\",\n\t\tcreationCost: \"\",\n\t\texecutionCost: \"\",\n\t\tgasEstimate: \"\",\n\t\ttimeOfAudit: \"\",\n\t\tfileSize: \"\",\n\t\tvunerabiltiesFound: \"\",\n\t\tnoOfLines: \"\",\n\t\tpercent: \"\",\n\t\terrorMessage: \"\",\n\t\tsuccessMessage: \"\",\n\t\trenderedList: \"\",\n\t\tloading: false,\n\t\tsuggestions: [],\n\t\tuserName: \"\",\n\t\tuserContactInfo: \"\",\n\t\tuserSuggestion: \"\",\n\t\tmodalOpen: false,\n\t\terrorLines: \"0\",\n\t\tlineNumbers: \"\"\n\t};\n\n\tcomponentDidMount() {\n\t\tthis.generateNumberedList();\n\t\tthis.setState({\n\t\t\tcontractCode: sampleContract()\n\t\t});\n\t}\n\n\t//get Time of Audit\n\tsetTimeOfAudit = () => {\n\t\tlet today = new Date();\n\t\tlet date =\n\t\t\ttoday.getFullYear() +\n\t\t\t\"-\" +\n\t\t\t(today.getMonth() + 1) +\n\t\t\t\"-\" +\n\t\t\ttoday.getDate();\n\t\tlet time =\n\t\t\ttoday.getHours() +\n\t\t\t\":\" +\n\t\t\ttoday.getMinutes() +\n\t\t\t\":\" +\n\t\t\ttoday.getSeconds();\n\t\tlet dateTime = date + \" \" + time;\n\n\t\tthis.setState({\n\t\t\ttimeOfAudit: dateTime\n\t\t});\n\t};\n\n\t//receive compiler version from child component-landingPageSection1 and store it to state\n\tselectCompiler = compiler => {\n\t\tthis.setState({\n\t\t\tcurrentCompiler: compiler\n\t\t});\n\t};\n\n\t//receive contract code from child component-landingPageSection2 and store it to state\n\tstoreContractCodeToState = contractCode => {\n\t\t//console.log(contractCode);\n\t\tthis.setState({\n\t\t\tcontractCode: contractCode\n\t\t});\n\t};\n\t//reset all neccesary variable when screen is clicked, drop down is selected and other similar events\n\tremoveErrorMessage = () => {\n\t\tthis.setState({\n\t\t\twarningsList: \"\",\n\t\t\tcreationCost: \"\",\n\t\t\texecutionCost: \"\",\n\t\t\tgasEstimate: \"\",\n\t\t\ttimeOfAudit: \"\",\n\t\t\tfileSize: \"\",\n\t\t\tloading: false,\n\t\t\tvunerabiltiesFound: \"\",\n\t\t\tnoOfLines: \"\",\n\t\t\tpercent: \"\",\n\t\t\terrorMessage: \"\",\n\t\t\tsuccessMessage: \"\",\n\t\t\trenderedList: \"\"\n\t\t});\n\t};\n\n\trenderWarningList = warnings => {\n\t\t//create an array for all lines that have errors/warnings\n\t\tlet errorLines = [];\n\t\twarnings.map(warnings => {\n\t\t\terrorLines.push(warnings.key);\n\t\t});\n\n\t\tlet rndm = 0;\n\t\tlet list = warnings.map(warnings => {\n\t\t\treturn (\n\t\t\t\t<List.Item key={rndm++}>\n\t\t\t\t\t<List.Content>\n\t\t\t\t\t\t<List.Header as=\"a\">line {warnings.key}</List.Header>\n\t\t\t\t\t\t<List.Description as=\"a\">\n\t\t\t\t\t\t\t{warnings.value}\n\t\t\t\t\t\t</List.Description>\n\t\t\t\t\t</List.Content>\n\t\t\t\t</List.Item>\n\t\t\t);\n\t\t});\n\n\t\t//update loading bar\n\t\tthis.setState({\n\t\t\tpercent: \"100\",\n\t\t\tloading: false,\n\t\t\trenderedList: list,\n\t\t\terrorLines: errorLines,\n\t\t\twarningsList: warnings.length\n\t\t});\n\n\t\t//if there are warning/errors, update numbered table to indicate their location\n\t\tif (!!errorLines) {\n\t\t\tthis.generateNumberedList();\n\t\t}\n\t};\n\n\t//generate rendered number list on left side of contract page 1\n\tgenerateNumberedList = () => {\n\t\tlet x = lineNumbers();\n\n\t\tlet list = x.map(numbers => {\n\t\t\t//check each line if contains an error\n\t\t\tlet errorLine = this.state.errorLines.includes(numbers);\n\t\t\treturn (\n\t\t\t\t<Table.Row key={numbers} error={errorLine}>\n\t\t\t\t\t<Table.Cell>{numbers}</Table.Cell>\n\t\t\t\t</Table.Row>\n\t\t\t);\n\t\t});\n\n\t\t//update loading bar\n\t\tthis.setState({\n\t\t\tnumberedList: list\n\t\t});\n\t};\n\n\tauditCode = dataArray => {\n\t\treturn Auditor(dataArray);\n\t};\n\n\t//Compile contract and run audit\n\tonSubmit = async () => {\n\t\t//check if compiler is selected by user else notify user\n\t\tif (this.state.currentCompiler) {\n\t\t\tthis.setTimeOfAudit();\n\t\t\tlet self = this;\n\n\t\t\t//notify user of progress\n\t\t\tthis.setState({\n\t\t\t\tloading: true,\n\t\t\t\terrorMessage: \"\",\n\t\t\t\tsuccessMessage: \"\"\n\t\t\t});\n\n\t\t\t//store contract code to state and prepare for compile and audit\n\t\t\tlet source = this.state.contractCode;\n\t\t\t//split code into array based on each new line\n\t\t\tlet dataArray = source.split(\"\\n\");\n\t\t\tlet dataArrayLength = dataArray.length;\n\t\t\tconsole.log(\"data array is \" + dataArrayLength);\n\n\t\t\t//update loading bar\n\t\t\tself.setState({\n\t\t\t\tpercent: \"25\"\n\t\t\t});\n\n\t\t\t//printlist of available compilers\n\t\t\twindow.BrowserSolc.getVersions(function(\n\t\t\t\tsoljsonSources,\n\t\t\t\tsoljsonReleases\n\t\t\t) {\n\t\t\t\t//console.log(soljsonSources);\n\t\t\t\t//console.log(soljsonReleases);\n\t\t\t});\n\n\t\t\t//Load a chosen compiler version\n\t\t\twindow.BrowserSolc.loadVersion(\n\t\t\t\tthis.state.currentCompiler,\n\t\t\t\tasync function(compiler) {\n\t\t\t\t\tlet optimize = 1;\n\t\t\t\t\tlet result = compiler.compile(source, optimize);\n\t\t\t\t\t// result = JSON.stringify(result);\n\t\t\t\t\t// result = JSON.parse(result);\n\t\t\t\t\t//console.log(result.contracts);\n\t\t\t\t\tlet contractName = Object.keys(result.contracts)[0];\n\n\t\t\t\t\t//check for errrors in compilation\n\t\t\t\t\tif (result.errors && !result.sources[\"\"]) {\n\t\t\t\t\t\t//save all warning and errors to state\n\t\t\t\t\t\tself.setState({\n\t\t\t\t\t\t\terrorMessage: result.errors[0]\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\t//   \t//check for warnings in compilation\n\t\t\t\t\t\t//   \tif(result.errors){\n\n\t\t\t\t\t\t//   //save all warning and errors to state\n\t\t\t\t\t\t//   self.setState({\n\t\t\t\t\t\t//   \t\terrorMessage: result.errors[0]\n\t\t\t\t\t\t//   \t})\n\t\t\t\t\t\t// }\n\n\t\t\t\t\t\tconst provider = new Web3.providers.HttpProvider(\n\t\t\t\t\t\t\t\"https://rinkeby.infura.io/v3/c3085f6dbf9347358b5ab5d30de1fdbe\"\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst web3 = new Web3(provider);\n\t\t\t\t\t\t//console.log(result);\n\n\t\t\t\t\t\tlet bytecode = result.contracts[contractName].bytecode;\n\n\t\t\t\t\t\t//compilation was succesful, auditing and updating general stats begins at this point\n\n\t\t\t\t\t\t//compute total gas cost which is the estimated creation cost plus the execution cost\n\t\t\t\t\t\t// let totalGasCost = result.contracts[\":Migrations\"].gasEstimates.creation[0]+result.contracts[\":Migrations\"].gasEstimates.creation[1];\n\n\t\t\t\t\t\tself.setState({\n\t\t\t\t\t\t\tnoOfLines: dataArrayLength,\n\t\t\t\t\t\t\t// creationCost:result.contracts[\":Migrations\"].gasEstimates.creation[0],\n\t\t\t\t\t\t\t// executionCost:result.contracts[\":Migrations\"].gasEstimates.creation[1],\n\t\t\t\t\t\t\tgasEstimate: await web3.eth.estimateGas({\n\t\t\t\t\t\t\t\tto:\n\t\t\t\t\t\t\t\t\t\"0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe\",\n\t\t\t\t\t\t\t\tdata: \"0x\" + bytecode\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\tpercent: 50,\n\t\t\t\t\t\t\tsuccessMessage: \"Audit Complete!\"\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\t//console.log(\"gas estimate is \" + self.state.gasEstimate)\n\t\t\t\t\t\t//send contract code to auditor and await feed back of array of warnings\n\t\t\t\t\t\tlet warnings = self.auditCode(dataArray);\n\t\t\t\t\t\tself.setState({\n\t\t\t\t\t\t\tpercent: 75\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\t//send array of warnings to renderList function to create organized JSX and update state\n\t\t\t\t\t\tself.renderWarningList(warnings);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t} else {\n\t\t\tthis.setState({\n\t\t\t\terrorMessage: \"Please select a compiler\",\n\t\t\t\tloading: false\n\t\t\t});\n\t\t}\n\t};\n\n\tsaveUserSuggestionToState = evt => {\n\t\tevt.preventDefault();\n\t\tlet userSuggestion = {};\n\t\tuserSuggestion.name = this.state.userName;\n\t\tuserSuggestion.contactInfo = this.state.userContactInfo;\n\t\tuserSuggestion.suggestion = this.state.userSuggestion;\n\t\tlet currentSuggestions = this.state.suggestions;\n\t\tcurrentSuggestions.push(userSuggestion);\n\n\t\tthis.setState({\n\t\t\tsuggestions: currentSuggestions,\n\t\t\tmodalOpen: false\n\t\t});\n\n\t\tconsole.log(this.state.suggestions);\n\t};\n\n\tuserNameToState = event => {\n\t\tthis.setState({\n\t\t\tuserName: event.target.value\n\t\t});\n\t};\n\n\tuserContactInfoToState = event => {\n\t\tthis.setState({\n\t\t\tuserContactInfo: event.target.value\n\t\t});\n\t};\n\n\tuserSuggestionToState = event => {\n\t\tthis.setState({\n\t\t\tuserSuggestion: event.target.value\n\t\t});\n\t};\n\n\thandleOpen = () => this.setState({ modalOpen: true });\n\n\thandleClose = () => this.setState({ modalOpen: false });\n\n\trender() {\n\t\treturn (\n\t\t\t<Container style={{ width: \"1300px\", marginTop: \"10px\" }}>\n\t\t\t\t<Grid>\n\t\t\t\t\t<Grid.Row key={\"gridRow1\"}>\n\t\t\t\t\t\t<Grid.Column width={12} key={\"gridColumn1\"}>\n\t\t\t\t\t\t\t<LandingPageSection1\n\t\t\t\t\t\t\t\tgenerateNumberedList={this.generateNumberedList}\n\t\t\t\t\t\t\t\tnumberedList={this.state.numberedList}\n\t\t\t\t\t\t\t\tcontractCode={this.state.contractCode}\n\t\t\t\t\t\t\t\tremoveErrorMessage={this.removeErrorMessage}\n\t\t\t\t\t\t\t\tloading={this.state.loading}\n\t\t\t\t\t\t\t\tsuccessMessage={this.state.successMessage}\n\t\t\t\t\t\t\t\terrorMessage={this.state.errorMessage}\n\t\t\t\t\t\t\t\tpercent={this.state.percent}\n\t\t\t\t\t\t\t\tstoreContractCodeToState={\n\t\t\t\t\t\t\t\t\tthis.storeContractCodeToState\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Grid.Column>\n\n\t\t\t\t\t\t<Grid.Column width={4} key={\"gridColumn2\"}>\n\t\t\t\t\t\t\t<LandingPageSection2\n\t\t\t\t\t\t\t\twarningsList={this.state.warningsList}\n\t\t\t\t\t\t\t\trenderedList={this.state.renderedList}\n\t\t\t\t\t\t\t\tgasEstimate={this.state.gasEstimate}\n\t\t\t\t\t\t\t\tremoveErrorMessage={this.removeErrorMessage}\n\t\t\t\t\t\t\t\tloading={this.state.loading}\n\t\t\t\t\t\t\t\tnoOfLines={this.state.noOfLines}\n\t\t\t\t\t\t\t\ttimeOfAudit={this.state.timeOfAudit}\n\t\t\t\t\t\t\t\tonSubmit={this.onSubmit}\n\t\t\t\t\t\t\t\tselectCompiler={this.selectCompiler}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Grid.Column>\n\n\t\t\t\t\t\t{/*<Grid.Column width={1} key={\"gridColumn3\"}>\n\t\t\t\t\t\t\t<Modal\n\t\t\t\t\t\t\t\topen={this.state.modalOpen}\n\t\t\t\t\t\t\t\tonClose={this.handleClose}\n\t\t\t\t\t\t\t\ttrigger={\n\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\tonClick={this.handleOpen}\n\t\t\t\t\t\t\t\t\t\tstyle={{ marginTop: \"775px\" }}\n\t\t\t\t\t\t\t\t\t\tbasic\n\t\t\t\t\t\t\t\t\t\tcircular\n\t\t\t\t\t\t\t\t\t\tsize=\"huge\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\tSuggestion Box\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Modal.Header\n\t\t\t\t\t\t\t\t\tstyle={{ fontSize: \"19px\", color: \"grey\" }}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tThank you for taking the time to leave some\n\t\t\t\t\t\t\t\t\tfeedback, I am a solo enthusiast who created\n\t\t\t\t\t\t\t\t\tthis auditor for fun and to contribute to\n\t\t\t\t\t\t\t\t\tour beautiful ecosystem, I appreciate all\n\t\t\t\t\t\t\t\t\tsuggestions, contributions and feedback to\n\t\t\t\t\t\t\t\t\thelp improve this platform.\n\t\t\t\t\t\t\t\t</Modal.Header>\n\t\t\t\t\t\t\t\t<Modal.Content image>\n\t\t\t\t\t\t\t\t\t<Modal.Description>\n\t\t\t\t\t\t\t\t\t\t<Form\n\t\t\t\t\t\t\t\t\t\t\tname=\"contact\"\n\t\t\t\t\t\t\t\t\t\t\tnetlify\n\t\t\t\t\t\t\t\t\t\t\tdata-netlify=\"true\"\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\t\t\t\tname=\"First Name\"\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={this.userNameToState}\n\t\t\t\t\t\t\t\t\t\t\t\tvalue={this.state.userName}\n\t\t\t\t\t\t\t\t\t\t\t\tlabel=\"Name(optional)\"\n\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"John Doe.....\"\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\t\t\t\tname=\"email\"\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.userContactInfoToState\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tvalue={\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.state.userContactInfo\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tlabel=\"Contact Information\"\n\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Email, Telegram,Git..etc\"\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t\t\t<TextArea\n\t\t\t\t\t\t\t\t\t\t\t\tname=\"suggestions\"\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.userSuggestionToState\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tvalue={\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.state.userSuggestion\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\t\t\t\twidth: \"850px\",\n\t\t\t\t\t\t\t\t\t\t\t\t\theight: \"100px\"\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Please enter your message here...\"\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\t\tfloated=\"right\"\n\t\t\t\t\t\t\t\t\t\t\t\tsecondary\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.saveUserSuggestionToState\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\tSubmit\n\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t</Form>\n\t\t\t\t\t\t\t\t\t\t<h4 style={{ color: \"gray\" }}>\n\t\t\t\t\t\t\t\t\t\t\tETH Address:\n\t\t\t\t\t\t\t\t\t\t\t0x001FabDCb503f618ceE9d79D949301EEBC170647\n\t\t\t\t\t\t\t\t\t\t</h4>\n\t\t\t\t\t\t\t\t\t</Modal.Description>\n\t\t\t\t\t\t\t\t</Modal.Content>\n\t\t\t\t\t\t\t</Modal>\n\t\t\t\t\t\t</Grid.Column>*/}\n\t\t\t\t\t</Grid.Row>\n\t\t\t\t</Grid>\n\n\t\t\t\t<h4 style={{ marginLeft: \"380px\", color: \"gray\" }}>\n\t\t\t\t\tSuggestions and Contributions\n\t\t\t\t\thttps://github.com/Christopher-I/SmartContractAuditorWebBuild\n\t\t\t\t\tETH Address: 0x001FabDCb503f618ceE9d79D949301EEBC170647\n\t\t\t\t</h4>\n\t\t\t</Container>\n\t\t);\n\t}\n}\n\nexport default landingPage;\n\nconst lineNumbers = () => {\n\tlet array = [];\n\tlet i;\n\n\tfor (i = 1; i < 1001; i++) {\n\t\tarray.push(i);\n\t\t//[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25];\n\t}\n\n\treturn array;\n};\n"]},"metadata":{},"sourceType":"module"}